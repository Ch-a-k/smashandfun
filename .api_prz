English'  Polski'
↑
LogoP24

INTEGRATION
Payment system
Authentication
Set up and test your accounts
API guidelines
Use cases
Definitions
Graphic materials
TRANSACTION SERVICE
Transaction service API
Notification
Calculating Sign
ADDITIONAL SERVICES
Additional API functionality
Refund Notification
Payment Methods Use Cases
CARD PAYMENT
Card Use Cases
Card API
Card Additional Notification
BLIK
BLIK Use Cases
BLIK API
BLIK Additional Notification
Alias Update Notification
REPORTS
Report API
GOOGLE PAY
Google Pay Description
Google Pay API
APPLE PAY
Apple Pay
Apple Pay API
HOW TO INTEGRATE INSTALLMENTS?
Buttons and banners
Widget
Simulator
Przelewy24 REST API Documentation (1.0.16)
URL: https://www.przelewy24.pl/support
Payment system
Przelewy24 provides an authorisation and clearing system and provides payment services as a Domestic Payment Institution.

Through Przelewy24 API you can access all of the services offered by the system. Below documentation includes most common used functionalities. Contact the Sales Department to find out more.

In order to be able to access Przelewy24 API, you first need to create an account in the P24 Administration Panel. After registration, among others, the merchant may use the administration panel to keep track of the account balance, all payments made by their clients and refunds.
Transaction process
After placing the order, customer clicks the "pay" button. Merchant system sends a register transaction request to the P24 system and receives a unique TOKEN. Afterwards customer will be redirected to the P24 transaction panel. In case of payment cancellation, the customer is redirected to the “urlReturn" address. Upon successful completion of the transaction, the customer is redirected to the "urlReturn" address. P24 sends the transaction notification to the "urlStatus" address. The transaction notification is sent asynchronously. To verify the credibility of the received confirmation, the Merchant’s system sends a return request to P24 as a transaction verification.

Payment process
Transaction requirement
In order to carry out the transaction correctly, merchant’s website should offer transaction registering as well as handling transaction result.

The entire process is fully automatic and does not require any interference of the shop personnel in it.

After the payment process has been completed successfully, status of the order on the merchant website should automatically change to paid/accepted. At this point, merchant may proceed with order fulfilment.

Environment
Authentication
P24 supports the mechanism of Basic Authentication.
basicAuth
This is the default authentication method. User and secretId are available in P24 panel:
- "User" it's the same value as posId,
- secretId it's the samevalue as key for reports (API key).
Security Scheme Type: HTTP
HTTP Authorization Scheme: basic
Set up and test your accounts
Create your account
Please register your account in Przelewy24 service - link

Create account
Create your sandbox account (sandbox)
Configure your sandbox account. Having access to Przelewy24 service you can create sandbox account. Navigate to 'My account', next 'SANDBOX account'.

Create sandbox account
Create a user for yourself and your team members
If there is a need you can create and configure accounts for your team members with different roles and credentials to Przelewy24 service.

Create a user
Build API integration
Configure your access to account using Przelewy24 API with API credentials (production and sandbox Przelewy24 service):
- user (posId/login) - ID Przelewy24 account - confirmation e-mail after registration process
- CRC - CRC key using to calculate sign
- secretId (API key) - 'klucz do raportów'.

(Przelewy24 service - production version) Build API integration - production Przelewy24 service (Przelewy24 service - sandbox version) Build API integration - sandbox Przelewy24 service
Test your API integration
Using TestAccess endpoint and your credentials (user and secretId) test your integration.
IP address and default Web Services
Fill in 'IP address' ('My account' - 'Moje dane' - 'API data and configuration') where your assets are if there is a need to reach access to Przelewy24 Web Services.
Defaults are:

TransactionRegister
TransactionVerify
TransactionRefund
PaymentsMethods
GetTransactionBySessionId.
If there is a need to launch other than defaults, please contact customer care. ####END SETUP####
API guidelines
Please follow the steps below to ensure your payments via Przelewy24 process smoothly.
Verify your hosting configuration
We recommend using the operating system and PHP in the 64-bit version, due to greater computing capabilities and greater efficiency. In order to verify the version of the operating system and PHP version, for example, the phpinfo code can be used https://www.php.net/manual/en/function.phpinfo.php#refsect1-function.phpinfo-examples

    <?php
    // Show all information, defaults to INFO_ALL
      phpinfo();

    // Show just the module information.
    // phpinfo(8) yields identical results.
      phpinfo(INFO_MODULES);
    ?>
Next, save the file as a PHP extension (.php) and access the path / URL where the file is hosted. The file thus created must be placed on your web hosting - the address of this file should not be shared with anyone. REMEMBER!
Once verified, the placed file should be removed from the server.
Limit ranges of type INT signed / unsigned
Range INT signed = -2,147,483,648 to 2,147,483,647

Range INT unsigned = 0 to 4294,967,295

Range BIGINT singed = -9223372036854775808 to 9223372036854775807

Range BIGINT unsigned = 0 to 18446744073709551615

REMEMBER!
If you are using OS or PHP version 32bit, your application code may interpret a value greater than (2147483647 - maximum INT signed value) as a float type - which may cause problems in payment processing.

    $large_number = 2147483648;
    var_dump($large_number); // float(2147483648)

In this case, change the range to BIGINT to allow a value greater than the maximum value of the INT signed range.
Verifying the database
If you are storing the order_id - order ID value from the Przelewy24 system in the database, please verify that the set column type will allow a value larger than the maximum INT signed = 2147483647.
If this is the case, please change the range to BIGINT, in order to allow a value greater than the maximum INT signed range value.
Casting the order_id parameter
Check whether your application code will allow a value greater than the maximum value i.e. INT signed = 2147483647 to be written/read.
If this is the case, change the range to BIGINT to allow a value greater than the maximum value of the INT signed range.
Environments
Production environment

Every request is differentiated by its own unique request URL. This way P24 knows which API-function you want to access. Combined with the base URL for either the production- or test-environment, you will get the complete API-URL. Base URL production system:
https://secure.przelewy24.pl/api/v1
Production transactions will be visible in the panel
https://panel.przelewy24.pl/index.php

Test environment

During implementation of the mechanisms in merchant’s system, it is recommended to use test environment. Test environment allows to reproduce system functionalities without making actual payments.

Test environment endpoint:
https://sandbox.przelewy24.pl/api/v1

Test transactions will be visible in the test panel
https://sandbox.przelewy24.pl/panel/index.php

The testing environment cannot be used for production transactions.
IP server addresses
We recommend script protection against suspicious calls using address filtering for incoming connections. IP server ranges for the P24 servers:

5.252.202.255 , 5.252.202.254
20.215.81.124
Environment requirements
Transport Layer Security - TLS 1.2 (minimum required)

https://wiki.mozilla.org/Security/Server_Side_TLS
https://en.wikipedia.org/wiki/Transport_Layer_Security

OpenSSL 1.0.1 (minimum required)

https://www.openssl.org/news/changelog.html#x31

cURL 7.34.0

https://curl.haxx.se/docs/manpage.html#--tlsv12
Possible error codes
ErrorCode	Description
err00	Invalid script call
err01	No confirmation of reception of authorisation has been received from the shop
err02	No authorisation has been received
err03	This query has already been processed
err04	Authorisation query incomplete or invalid
err05	Reading of web-shop configuration failed
err06	Record of authorisation query failed
err07	A different person is making the payment
err08	Status of connection with the shop not established.
err09	Limit on the number of data corrections exceeded.
err10	Invalid transaction amount!
err49	Transaction risk assessment score too high.
err51	Invalid website call
err52	Invalid feedback session information!
err53	Transaction error!
err54	Incompatible transaction amounts!
err55	Invalid response code!
err56	Invalid card
err57	IncompatibleTEST flag!
err58	Invalid sequence number!
err59	Invalid transaction currency!
err101	Website call error A required parameter is missing from the transaction request or an inadmissible value has appeared.
err102	Allowed time for transaction has expired
err103	Invalid amount of transfer
err104	Transaction is awaiting confirmation.
err105	Transaction made after expiry of time allowed for transaction
err161	Request for transaction interrupted by User The customer has interrupted the payment procedure by clicking "Go back" on the payment method selection site.
err162	Request for transaction interrupted by User The customer has cancelled the payment procedure by clicking „Resign” on the payment instructions site.
Use cases
How to display a full selection of payment methods in your shop?
In order to facilitate the process of payment, it is possible to move the customer's selection of payment method to the very stage of placing an order. If the customer additionally accepts the terms and conditions of Przelewy24 (in the request, you need to set regulationAccept = true), they would be redirected from the shop's website directly to the bank or to the form for card payments, after clicking "pay".

In order to download the list of payment methods, you need to use the PaymentMethods method, described in the Additional Services. Payment Methods
The list may be presented on your website in any form.
How to redirect a customer to specific method of payment?
In order to redirect the customer directly to selected method of payment, an identifier of a given method must be sent in the method field in transaction request. For instance, when redirecting to the mTransfer method, the request looks as follows:

    {
      "merchantId": {{merchantId}},
      "posId": {{posId}},
      "sessionId": "{{sessionId}}",
      "amount": {{amount}},
      "currency": "{{currency}}",
      "description": "{{description}}",
      "email": "{{email}}",
      "country": "PL",
      "language": "pl",
      "method": {{method}},
      "urlReturn": "{{urlReturn}}",
      "sign": "{{sign}}",
    }
How to limit the time allowed for finalise the payment by a customer?
Depending on specific character of a given system, it might be necessary to limit the time that customer has for completing their payment. This option is controlled by timeLimit parameter. Setting this parameter to 0 would switch off the timer. Entering values 1-99 sets the time limit in minutes.
How to enable customer's return to the shop, so that they don't have to wait for synchronic payment confirmation?
In case of some payment methods, especially e-transfers, payment is confirmed within couple of minutes after making it. The client may either wait for result of the transaction in the transaction service and be redirected back to the shop upon receiving confirmation (that way the shop would already get the payment notification), or the client may be immediately redirected to the shop, without waiting for the result of the transaction. The choice between these two variants is made by means of the transaction request parameter waitForResult. The latter option is enabled when the parameter is set on false, the former, when the parameter is set on true.
How to process a refund to a customer?
Processing refunds, like all services in Przelewy24, is fully automatic and done via webservices. Refunds are processed by means of transaction/refund method.

Multiple refund requests may be ordered, as long as the sum of refunds does not exceed the sum of the original transaction.
Can a customer finalise a transaction process after the end of a session?
If a customer discontinues payment process (e.g. after accessing the bank’s website), Przelewy24 system offers an option of sending an automatic e-mail with a link that allows to finalise the initiated payment process. If the customer use this option, the outcome will be no different than the outcome of a transaction finalised on-line.

To have this functionality enabled, please contact Please contact the support stuff via contact form.
Definitions
CVV – card verification value/code.

Cyclic Redundancy Check (CRC) – unique key (String) obtained from Przelewy24 used to generate the checksum of the parameters sent.

Dynamic Currency Conversion (DCC) – process whereby the amount of card transaction is converted to the currency of the payment card’s country of issue at the point of sale.

Merchant – an institution or a private person using Przelewy24 services.

Session ID – unique ID used to identify single transaction in merchant system.

Web Service – endpoint, protocol, information structure standard using to exchange data between systems.
Graphic materials
P24 logo and banners are available at: https://www.przelewy24.pl/en/download?#materialy-graficzne
Transaction service API
Transaction registration
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json
required

Before sending the transaction request, transaction data must be saved in the merchant’s local database. In particular, the session ID and the transaction amount should be stored.


Redirection to transaction panel

URL address:https://secure.przelewy24.pl/trnRequest/{TOKEN}

where {TOKEN} was obtained upon transaction registration.

On transaction success the URL address transferred in "urlStatus" parameter is used to send notification irrespective of whether the customer has been redirected to "urlReturn" or not. The notification is sent only for correct payments. The system does not send information on invalid or failed payments. The notification is sent in the JSON format.

Show Transaction result JSON
merchantId
required
integer
Merchant identification number
posId
required
integer
Shop identification number (defaults to merchant ID)
sessionId
required
string <= 100 characters
Unique identifier from merchant's system
amount
required
integer
Transaction amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
currency
required
string <= 3 characters
Default: "PLN"
Currency compatible with ISO, e.g. PLN
description
required
string <= 1024 characters
Transaction description
email
required
string <= 50 characters
Customer's e-mail
client	
string <= 40 characters
Customer's first name and surname
address	
string <= 80 characters
Customer's address
zip	
string <= 10 characters
Customer's postal code
city	
string <= 50 characters
Customer's city
country
required
string <= 2 characters
Default: "PL"
Country codes compatible with ISO, e.g. PL, DE, etc.
phone	
string <= 12 characters
Customer's telephone in the following format: 481321132123
language
required
string <= 2 characters
Default: "pl"
One of following language codes according to ISO 639-1: bg, cs, de, en, es, fr, hr, hu, it, nl, pl, pt, se, sk, ro
method	
integer
Payment method ID. List of payment methods provided in the panel or available through API
urlReturn
required
string <= 250 characters
URL address to which customer will be redirected when transaction is complete
urlStatus	
string <= 250 characters
URL address to which transaction status will be send
timeLimit	
integer
Time limit for transaction process, 0 - no limit, max. 99 (in minutes)
channel	
integer
Enum: 1 2 4 8 16 32 64 128 256 4096 8192 16384
1 - card + ApplePay + GooglePay, 2 - transfer, 4 - traditional transfer, 8 - N/A, 16 - all 24/7 – makes available all payment methods, 32 - use pre-payment, 64 – only pay-by-link methods, 128 – instalment payment forms, 256 – wallets, 4096 - card, 8192 - blik, 16384 - all methods except blik

To activate the specific channels, their values should be summed up.

Example: transfer and traditional transfer: channel=6
waitForResult	
boolean
Parameter determines wheter a user should wait for result of the transaction in the transaction service and be redirected back to the shop upon receiving confirmation or be redirected back to the shop immediately after payment. Read more
regulationAccept	
boolean
Default: false
Acceptance of Przelewy24 regulations:
false – display consent on p24 website (default),
true – consent granted, do not display.
In case the „true” parameter is sent, the consent – worded as follows – must be displayed on the Partner’s website: „I hereby state that I have read the regulations and information obligation of ”Przelewy24”.
Under words regulations and information obligation there must be hyperlinks redirecting to websites with these documents. The checkbox must not be ticked by default.
shipping	
integer
Delivery cost
transferLabel	
string <= 20 characters
Description forwarded to transfer's description (not in every payment methods). A parameter can contain values only ​​in a range [a-z A-Z 0-9 ęółśążźćńĘÓŁŚĄŻŹĆŃ . /\ :- ]
mobileLib	
integer
Value: 1
The parameter is necessary while using SDK libraries. The value passed in mobileLib parameter is always 1 and value passed in sdkVersion determines which version of library should be used.
sdkVersion	
string <= 10 characters
Version of mobile library. Determines if transaction is mobile.
sign
required
string <= 100 characters

Checksum of parameters:
{"sessionId":"str","merchantId":int,"amount":int,"currency":"str","crc":"str"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
encoding	
string <= 15 characters
Coding system for characters sent: ISO-8859-2, UTF-8, Windows-1250
methodRefId	
string <= 250 characters
Special parameter for some payment flows e.g. BLIK and Card one-click.
cart	
Array of objects (CartParameters)
cart
additional	
object
Set of additional information about the transaction or the payer
Responses

200 successful operation
400 bad request
401 not authorized

POST
/api/v1/transaction/register
Sandbox server (uses test data)
https://sandbox.przelewy24.pl/api/v1/transaction/register
Production server (uses live data)
https://secure.przelewy24.pl/api/v1/transaction/register
Request samples

Payload
Content type
application/json

Copy
Expand all Collapse all
{
"merchantId": 0,
"posId": 0,
"sessionId": "string",
"amount": 0,
"currency": "PLN",
"description": "string",
"email": "string",
"client": "string",
"address": "string",
"zip": "string",
"city": "string",
"country": "PL",
"phone": "string",
"language": "pl",
"method": 0,
"urlReturn": "string",
"urlStatus": "string",
"timeLimit": 0,
"channel": 1,
"waitForResult": true,
"regulationAccept": false,
"shipping": 0,
"transferLabel": "string",
"mobileLib": 1,
"sdkVersion": "string",
"sign": "string",
"encoding": "string",
"methodRefId": "string",
"cart": [
{}
],
"additional": {
"shipping": {},
"PSU": {}
}
}
Response samples

200400401
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"token": "string"
},
"responseCode": 0
}
Transaction verification
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

After receiving notification, the merchant’s system should perform an additional action to confirm the payment and authenticate the notification. It is necessary to use transaction/verify method.

Important! Transaction will be confirmed only after verification process. In case the customer performs transaction and merchant does not verify performed transaction, amount will not be transferred to the merchant and settled. It will stay at the customer’s disposal as an advance payment.
merchantId
required
integer
Merchant ID
posId
required
integer
Shop identification number (defaults to merchant ID)
sessionId
required
string <= 100 characters
Unique identifier from merchant's system
amount
required
integer
Transaction amount which format is presented as amount in lowest currency unit, e.g. 1.23 PLN = 123
currency
required
string <= 3 characters
Default: "PLN"
Currency
orderId
required
integer <int64>
Id of an order assigned by P24
sign
required
string
Checksum of parameters:
{"sessionId":"str","orderId":int,"amount":int,"currency":"str","crc":"str"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
Responses

200 successful operation
400 bad request
401 not authorized

PUT
/api/v1/transaction/verify
Request samples

Payload
Content type
application/json

Copy
{
"merchantId": 0,
"posId": 0,
"sessionId": "string",
"amount": 0,
"currency": "PLN",
"orderId": 0,
"sign": "string"
}
Response samples

200400401
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"status": "success"
},
"responseCode": 0
}
Notification
Transaction result
merchantId	
integer
Merchant identification number
posId	
integer
Shop identification number (defaults to merchant ID)
sessionId	
string <= 100 characters
Unique identifier from merchant's system
amount	
integer
Amount of paid transaction expressed in lowest currency unit, e.g. 1.23 PLN = 123
originAmount	
integer
Amount of the transaction when registered the token expressed in lowest currency unit, e.g. 1.23 PLN = 123
currency	
string <= 3 characters
Default: "PLN"
Currency compatible with ISO, e.g. PLN
orderId	
integer <int64>
Transaction number assigned by P24
methodId	
integer
Payment method used by customer
statement	
string
Payment title
sign	
string

Checksum of parameters:
{"merchantId":int,"posId":int,"sessionId":"string","amount":int,"originAmount":int,"currency":"string", "orderId":int,"methodId":int,"statement":"string","crc":"string"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"

Copy
{
"merchantId": 0,
"posId": 0,
"sessionId": "string",
"amount": 0,
"originAmount": 0,
"currency": "PLN",
"orderId": 0,
"methodId": 0,
"statement": "string",
"sign": "string"
}
Automatic transfer of transaction result
In case the first notification of the transaction result is not properly received by the merchant’s system (it is not correctly verified by the merchant's system), P24's system will send subsequent notifications. These will be sent after 3, 5, 15, 30, 60, 150 and 450 minutes (+/- 5 min.), unless the correct transaction verification will take place before that.

POST parameters are the same as in the case of the first notification.
Calculating Sign
Transaction register
Below are code snippets for 4 programming languages, demonstrating the correct calculation of the sign checksum for a transaction registration request.

To correctly calculate sign, remember about the correctness of the data (the merchantId and crc parameters are values ​​​​taken from the Przelewy24 panel, and the remaining values ​​​​are set individually for each transaction by the seller) and about the distinction of variable types (merchantId and amount are integer, the rest are string).

IMPORTANT!
Please note that the components of the sign checksum differ for individual requests sent or received from Przelewy24. The sign parameter value that must be passed in the transaction registration request is different from the sign value passed for the transaction verification request.

Examples of calculating the sign checksum for a transaction registration request:

PHP
JavaScript
Java
Python
$params = [
    'sessionId' => 'unique-session-id', // Here you should put the unique generated session ID
    'merchantId' => 999999, // Here you should put the Seller ID from the Przelewy24 panel
    'amount' => 1234, // Here you should put the transaction amount in groszy, 1234 means PLN 12.34
    'currency' => 'PLN', // Transaction currency should be placed here
    'crc' => 'crc-z-panelu-p24', // Here you should place the CRC key downloaded from the Przelewy24 panel
];
// Combining parameters into a string
$combinedString = json_encode($params, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
// Hashing with SHA-384
$hash = hash('sha384', $combinedString);
echo 'The checksum of the parameters is: ' . $hash;
Transaction verification
Special care should be taken when implementing the code to calculate the checksum for the transaction verification request and not only. The transaction verification request, unlike the transaction registration request, contains one new parameter, namely orderId.

The orderId parameter is a parameter set by Przelewy24 and is a numeric transaction identifier (integer type). The orderId value can be captured from the notification, which is sent to urlStatus.

Examples of calculating the sign checksum for a transaction verification request:

PHP
JavaScript
Java
Python
const params = {
  sessionId: "unique-session-id", // Here you should put the unique generated session ID
  orderId: 999999, // Here you should put the numeric transaction ID received e.g. from a notification
  amount: 1234, // Here you should put the transaction amount in groszy, 1234 means PLN 12.34
  currency: "PLN", // Transaction currency should be placed here
  crc: "crc-z-panelu-p24" // Here you should place the CRC key downloaded from the Przelewy24 panel
};
// Combining parameters into a string
const combinedString = JSON.stringify(params);
// Hashing with SHA-384
const hash = crypto.createHash('sha384').update(combinedString).digest('hex');
console.log('The checksum of the parameters is:', hash);
Salt calculator

Transaction register
Below are code snippets for 4 programming languages, demonstrating the correct calculation of the sign checksum for a transaction registration request.

To correctly calculate sign, remember about the correctness of the data (the merchantId and crc parameters are values ​​​​taken from the Przelewy24 panel, and the remaining values ​​​​are set individually for each transaction by the seller) and about the distinction of variable types (merchantId and amount are integer, the rest are string).

IMPORTANT!
Please note that the components of the sign checksum differ for individual requests sent or received from Przelewy24. The sign parameter value that must be passed in the transaction registration request is different from the sign value passed for the transaction verification request.

Examples of calculating the sign checksum for a transaction registration request:

PHP
JavaScript
Java
Python
$params = [
    'sessionId' => 'unique-session-id', // Here you should put the unique generated session ID
    'merchantId' => 999999, // Here you should put the Seller ID from the Przelewy24 panel
    'amount' => 1234, // Here you should put the transaction amount in groszy, 1234 means PLN 12.34
    'currency' => 'PLN', // Transaction currency should be placed here
    'crc' => 'crc-z-panelu-p24', // Here you should place the CRC key downloaded from the Przelewy24 panel
];
// Combining parameters into a string
$combinedString = json_encode($params, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES);
// Hashing with SHA-384
$hash = hash('sha384', $combinedString);
echo 'The checksum of the parameters is: ' . $hash;
Transaction verification
Special care should be taken when implementing the code to calculate the checksum for the transaction verification request and not only. The transaction verification request, unlike the transaction registration request, contains one new parameter, namely orderId.

The orderId parameter is a parameter set by Przelewy24 and is a numeric transaction identifier (integer type). The orderId value can be captured from the notification, which is sent to urlStatus.

Examples of calculating the sign checksum for a transaction verification request:

PHP
JavaScript
Java
Python
Salt calculator

Additional API functionality
Test Access
Test connection. REST uses "basicAuth" authorisation standard, where login and password are, respectively, account ID in P24 and the API key obtained from the “My data” section (“API and configuration data” subsection).
AUTHORIZATIONS:
basicAuth
Responses

200 OK
400 Bad Request
401 Unauthorized

GET
/api/v1/testAccess
Response samples

200400401
Content type
application/json

Copy
{
"data": true,
"error": "string"
}
Payment Methods
Method returns a list of payment methods.
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

lang
required
string
Enum: "pl" "en"
A language code. One of these: pl , en
QUERY PARAMETERS

amount	
integer
Value of the amount.
It gives the possibility of clarifying whether a given form of payment is available for a specific amount.
currency	
string
Default: "PLN"
Currency compatible with ISO, e.g. PLN
Responses

200 List of payment methods
403 Not authorized.
404 Payment methods not found

GET
/api/v1/payment/methods/{lang}?amount=150&currency=PLN
Response samples

200403404
Content type
application/json

Copy
Expand all Collapse all
{
"data": [
{}
],
"agreements": [ ],
"responseCode": ""
}
Refund transaction
Create refund for one or more transactions.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json
required

Parameter 'refunds' may contain multiple refunds.
requestId
required
string <= 45 characters
Individual request ID
refunds
required
Array of objects (RefundRequestArrayDataBasic)
refundsUuid
required
string <= 35 characters
Individual ID for a correct refund request in the merchant’s system
urlStatus	
string
Notification address for the refund batch transferred
Responses

201 Created. Parameter 'data' contains all refunds.
400 Invalid input data
401 Not authorized
409 Conflict
500 Unknown error

POST
/api/v1/transaction/refund
Request samples

Payload
Content type
application/json

Copy
Expand all Collapse all
{
"requestId": "string",
"refunds": [
{}
],
"refundsUuid": "string",
"urlStatus": "string"
}
Response samples

201400401409500
Content type
application/json

Copy
Expand all Collapse all
{
"data": [
{}
],
"responseCode": 0
}
Register offline transaction
This method allows you to register offline payments. To use the method, you must first register standard payment transaction with register transaction method.

Additionally, you can control which bank use for payment by using the method parameter.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json
required

Input parameters.
token	
string
Responses

200 Successful response
400 Invalid input data
401 Not authorized
409 Conflict
500 Undefined error

POST
/api/v1/transaction/registerOffline
Request samples

Payload
Content type
application/json

Copy
{
"token": "string"
}
Response samples

200400401409500
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"sessionId": "string",
"amount": 0,
"statement": "string",
"iban": "string",
"ibanOwner": "string",
"ibanOwnerAddress": "string"
},
"responseCode": 0
}
Split Payment
Split Payments are charged using previously registered token in a process analogous to transaction/register. When registering the token, you must add the splitPaymentDetails object characteristic for this form of transaction execution.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

Array
merchantId
required
integer
Merchant identification number
posId
required
integer
Shop identification number (defaults to merchant ID)
sessionId
required
string <= 100 characters
Unique identifier from merchant's system
amount
required
integer
Transaction amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
currency
required
string <= 3 characters
Default: "PLN"
Currency compatible with ISO, e.g. PLN
description
required
string <= 1024 characters
Transaction description
email
required
string <= 50 characters
Customer's e-mail
client	
string <= 40 characters
Customer's first name and surname
address	
string <= 80 characters
Customer's address
zip	
string <= 10 characters
Customer's postal code
city	
string <= 50 characters
Customer's city
country
required
string <= 2 characters
Default: "PL"
Country codes compatible with ISO, e.g. PL, DE, etc.
phone	
string <= 12 characters
Customer's telephone in the following format: 481321132123
language
required
string <= 2 characters
Default: "pl"
One of following language codes according to ISO 639-1: bg, cs, de, en, es, fr, hr, hu, it, nl, pl, pt, se, sk, ro
method	
integer
Payment method ID. List of payment methods provided in the panel or available through API
urlReturn
required
string <= 250 characters
URL address to which customer will be redirected when transaction is complete
urlStatus	
string <= 250 characters
URL address to which transaction status will be send
timeLimit	
integer
Time limit for transaction process, 0 - no limit, max. 99 (in minutes)
channel	
integer
Enum: "1" "2" "4" "8" "16" "32" "64" "128" "256" "4096" "8192" "16384"
1 - card + ApplePay + GooglePay, 2 - transfer, 4 - traditional transfer, 8 - N/A, 16 - all 24/7 – makes available all payment methods, 32 - use pre-payment, 64 – only pay-by-link methods, 128 – instalment payment forms, 256 – wallets, 4096 - card, 8192 - blik, 16384 - all methods except blik

To activate the specific channels, their values should be summed up.

Example: transfer and traditional transfer: channel=6
shipping	
integer
Delivery cost
transferLabel	
string <= 20 characters
Description forwarded to transfer's description (not in every payment methods). A parameter can contain values only ​​in a range [a-z A-Z 0-9 ęółśążźćńĘÓŁŚĄŻŹĆŃ . /\ :- ]
sdkVersion	
string <= 10 characters
Version of mobile library. Determines if transaction is mobile.
sign
required
string <= 100 characters

Checksum of parameters:
{"sessionId":"string","merchantId":int,"amount":int,"currency":"string","crc":"string"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"
encoding	
string <= 15 characters
Coding system for characters sent: ISO-8859-2, UTF-8, Windows-1250
cart	
Array of objects (CartParameters)
cart
methodRefId	
string <= 250 characters
Special parameter for some payment flows e.g. BLIK and Card one-click.
splitPaymentDetails
required
object
Responses

200 Successful operation
400 Bad request
401 Not authorized

POST
/api/v1/transaction/register/splitpayment
Request samples

Payload
Content type
application/json

Copy
Expand all Collapse all
{
"merchantId": 0,
"posId": 0,
"sessionId": "string",
"amount": 0,
"currency": "PLN",
"description": "string",
"email": "string",
"client": "string",
"address": "string",
"zip": "string",
"city": "string",
"country": "PL",
"phone": "string",
"language": "pl",
"method": 0,
"urlReturn": "string",
"urlStatus": "string",
"timeLimit": 0,
"channel": "1",
"shipping": 0,
"transferLabel": "string",
"sdkVersion": "string",
"sign": "string",
"encoding": "string",
"cart": [
{}
],
"methodRefId": "string",
"splitPaymentDetails": {
"vatAmount": 0,
"invoiceNumber": "string",
"nip": "string",
"iban": "string"
}
}
Response samples

200400401
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"token": "string"
},
"responseCode": 0
}
Refund by OrderID
Get refund details for given Order Id
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

orderId
required
any
existing refund Order Id
Responses

200 Request has been processed successful. Parameter 'data' contains refund info.
401 Not authorized
404 Refund with given Order Id not found
500 Undefined error

GET
/api/v1/refund/by/orderId/{orderId}
Response samples

200401404500
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"sessionId": "string",
"amount": 0,
"currency": "string",
"refunds": []
},
"responseCode": 0
}
Get transaction by sessionID
Method returns transaction information by sessionId
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

sessionId
required
any
Transaction ID assigned by Merchant
Responses

200 OK
400 Invalid input data
401 Incorrect authentication
404 Transaction not exist

GET
/api/v1/transaction/by/sessionId/{sessionId}
Response samples

200400401404
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"statement": "string",
"orderId": 0,
"sessionId": "string",
"status": 0,
"amount": 0,
"currency": "PLN",
"date": "string",
"dateOfTransaction": "string",
"clientEmail": "string",
"accountMD5": "string",
"paymentMethod": 0,
"description": "string",
"clientName": "string",
"clientAddress": "string",
"clientCity": "string",
"clientPostcode": "string",
"batchId": 0,
"fee": "string"
},
"responseCode": 0
}
Refund Notification
Result of the refund
A Refund Notification is sent upon successfull refund. Notification is sent asynchronously to the URL address provided in the refund request transaction/refund, in the parameter urlStatus. If urlStatus value is not provided, the notification is sent to the default URL address configured in the P24 panel (if such address had been provided).

In order to configure the default URL address, contact Partner Support via contact form

orderId	
integer <int64>
ID of the refunded transaction in P24 system
sessionId	
string
ID of the refunded transaction in Partner's system
merchantId	
integer
Merchant's ID of whose account the refund is performed
requestId	
string
ID of refund request provided in transaction/refund
refundsUuid	
string
ID of refund request in Partner's system provided in transaction/refund
amount	
integer
Refund amount expressed in lowest currency unit, e.g. 1.23 PLN = 123
currency	
string
Refund currency
timestamp	
integer
Time of sending the refund notification provided in UNIX timestamp
status	
integer
Value: 0
Status of the executed refund. The parameter always takes the value 0, which means success
sign	
string

Checksum of parameters:
{"orderId":int,"sessionId":"str","refundsUuid":"str","merchantId":int,"amount":int,
"currency":"str","status":int,"crc":"str"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"

Copy
{
"orderId": 0,
"sessionId": "string",
"merchantId": 0,
"requestId": "string",
"refundsUuid": "string",
"amount": 0,
"currency": "PLN",
"timestamp": 0,
"status": 0,
"sign": "string"
}
Payment Methods Use Cases
PayPo
The PayPo payment method is not the default payment method and is available after contacting our Merchant Success department via contact form.

After starting the service on your account, you must register the transaction correctly in the request transaction register pass additional parameters that are optional by default: client, city, zip, address.

The minimum amount sent in a request for PayPo method is currently PLN 5, its maximum value is PLN 5,000.

PayPo payments are paid after receiving funds from the operator. By default, the merchant will receive the funds within 5 business days.
PayPal
For the PayPal method to work properly on your website, it must be activated for the account on the Przelewy24 website. In order to activate the PayPal method, please contact us using the e-mail address assigned to your account in the Przelewy24 panel via contact form. To correctly perform a transaction for the indicated method, it is necessary to send the full object cart with the required parameters sent in the request transaction register.
Card Use Cases
Introduction
To implement standard card transactions processed via P24 paymentwall, it is enough to perform standard integration (payment service) and there is no need to implement the following solutions. The solutions described below are additional card functionalities.

Card featuers are not enabled by deufalt, the scope of the card functionality and testing methods depend on the Acquirer. Please contact the support stuff via contact form to learn more.
How to make in-shop card payment
In order to limit the number of steps in the payment process, it is possible to place the payment card form directly on the shop’s website. The implementation of the solution does not affect the processing of the credit card data – it is still run solely by Przelewy24, which allows to preserve all the safety requirements regarding the security of credit cards and to conform to the PCI DSS standard.

Card Payment
In order to carry out payments by payment cards, it is necessary to use the transaction/register method in order to register transaction in Przelewy24 and, subsequently, transfer the received transaction token for the call made by Przelewy24 JavaScript. The data provided in the form are transferred directly to Przelewy24, and, as a result, script on the shop’s part (indicated in the configuration) is activated.

A suitable contract is necessary for realisation of payments by payment cards on the shop’s website – please contact the Sales Department of Przelewy24 via contact form.
In-shop card payment process
Card payment


Transaction registration by transaction/register method, obtaining of a transaction token
Building DIV element on the merchant’s website for card payment form
Preparation of the JavaScript code which will be called on completion of the transaction
Field for card payment form
DIV element may be used to prepare the location on the website where the card payment form should be placed. The ID attribute of this element should be set to "P24FormContainer". Code should look as follow:
  <div
    id="P24FormContainer"
    data-sign="{P24SIGN}"
    data-successCallback="{FinishPaymentFunction}"
    data-failureCallback="{PaymentErrorFunction}"
    data-dictionary='{DICTIONARY JSON}' >
  </div>
Where:

{P24SIGN} – checksum, the same as the one used in transaction/register
{FinishpaymentFunction} – name of function called in case of a correct transaction with one input parameter – OrderID (integer) assigned by P24,
{PaymentErrorFunction} – name of function called in case of an incorrect transaction, the function returns one parameter - error code (integer),
{DICTIONARY JSON} – dictionary of terms used in the payment form, as stated below:
cardHolderLabel	
string
cardNumberLabel	
integer
cvvLabel	
integer
expDateLabel	
string
payButtonCaption	
string
threeDSAuthMessage	
string

Copy
{
"cardHolderLabel": "string",
"cardNumberLabel": 0,
"cvvLabel": 0,
"expDateLabel": "string",
"payButtonCaption": "string",
"threeDSAuthMessage": "string"
}
A script generating internal form in DIV#P24FormContainer should be attached to the website:

GET	https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.js?token={TOKEN}
Where the Token obtained as a result of the transaction/register method should be entered in {TOKEN}. Alternatively, individual CSS for the card registration form may be used.
URL for default styles:
https://secure.przelewy24.pl/inchtml/ajaxPayment/ajax.css

In case of 3D-Secure required, link redirecting to new authorisation window will appear. After successful authorisation window will be closed and function for correct transaction will be called. The return address provided in "urlReturn" parameter should lead to the script placed in the same domain as the request script. It should enable the following function:

  window.setTimeout(function(){
  opener.P24_Transaction.threeDSReturn(window);
  window.close();
  },1000);
How to register a card or make a payment?
The card registration should be made as a normal payment. Card payment can be made in 3 ways:
p24 paymentwall
direct API (card / pay) - if card data is processed by Merchant resources, the solution requires PCI DSS

Card Payment
form inside the store
Card Payment
Then, by card/info or additional notification, you can get information about the card, including the reference number necessary for subsequent charges.
Then, depending on whether we want to accept the payment, we perform transaction/verify or transaction/verify followed by transaction/refund, if it was only a sample payment, e.g. for PLN 1.

card pay
How to get card information?
There are two ways to get information about a card:

Use method card/info
Use additional notification
The notification can be used for any card transactions:

in the card/chargeWiths3ds, card/charge, card/pay processes for immediately displaying a message to a customer about a successful / failed transaction
in the RISK process on the part of the Partner to check the client's card and protect against fraud
when saving the card to the 1-click process, there is no need to ask for the card reference number
OneClick


Card reference number must be provided during transaction registration in methodRefId parameter.


OneClick
How to make a 1-click card payment with 3DS?
The dedicated card/chargeWith3ds method is used for this purpose.

Card reference number must be provided during transaction registration in methodRefId parameter.

The method will return a link to redirect the client and handle 3ds.

OneClick


OneClick 3ds
How to handle payments without customer participation (recurring)?
The method card/charge enables recurrent card charging based on transferred reference number.

Card reference number must be provided during transaction registration in methodRefId parameter

The refId parameter value obtained from transactions paid through wallet methods (e.g., Google Pay, Apple Pay, VISA Mobile) cannot be applied to recurring payments. Attempting to pay such a transaction will result in an error and ultimately a failure to process the payment.

Customer’s participation is not required to initiate the process.


Recurring Charge

OneClick

How to handle 3ds (including 3ds 2.X)?
Both 3ds and 3ds 2.X are handled in the same way. 3ds is handled automaticlly for solutions based on p24 paymentwall or form inside the store. Merchant doesn't have to do anything.

In case using card/pay or card/chargeWith3ds method for this purpose, you should redirect customer to the URL obtained from the answer.

Remember that after 3ds, the client will always be redirected to urlReturn. Merchant must process customer’s return from the bank website on their own. The returned link is active for 15 minutes.

How to register a card or pay in a mobile application?
Card registration or payment in the mobile application can be done in two suggested ways. You can open a p24 paymentwall in WebView, preferably with forced payment method for given cards. Another way is to use the card/pay method. Remember that the card/pay method should be called directly from the application to P24 without the participation of Merchant servers. Otherwise, you'll need a PCI DSS certificate.
How to test cards in a Sandbox environment?
To test card payments in a test environment, use the card numbers from the Saferpay documentation and any date as an expiry date from the future and a random 3-digit CVV. To test Google Pay, we recommend joining the Google Google Pay API Test Cards Allowlist - Google Groups development group.

After joining the group, several test card numbers (from Google) will be assigned to your Google account, selectable after pressing the Google Pay payment button.

Please note that card services are not enabled by default for the production or sandbox environment.
Will the Merchant process full card details?
PCI DSS certification is required to process full card data. P24 solutions support operations performed this way.

However, many solutions provide full card functionality, in which Merchant doesn't use full card data and therefore is no need to have PCI DSS. In such situations, Merchant only obtains the card's reference number (e.g. for later 1-click payments or recurring charges) and a set of insensitive data such as expiration date or BIN.


Card API
Card info
The method generates information about specific payment card based on previous payment. Including reference number to charge card without CVV authorisation.
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

orderId
required
integer <int64>
An unique order ID.
Responses

200 Success
400 Wrong input data
403 Not authorized
404 Transaction not exists

GET
/api/v1/card/info/{orderId}
Response samples

200400403404
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"refId": "string",
"bin": 0,
"mask": "string",
"cardType": "string",
"cardDate": "string",
"hash": "string"
},
"responseCode": 0
}
Charge card with 3DS
The method allows to charge a card based on the reference number.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

token	
string
Token registered by transaction/register method. Card reference number must be provided during transaction registration in methodRefId parameter.
Responses

200 The charge card command has been accepted - notification will be send on success.
201 The card payment requires 3DS redirection
400 Invalid input data
401 Not authorized

POST
/api/v1/card/chargeWith3ds
Request samples

Payload
Content type
application/json

Copy
{
"token": "string"
}
Response samples

200201400401
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"redirectUrl": "string"
},
"responseCode": 0
}
Charge card
The method allows to charge a card based on the reference number.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

token	
string
Token registered by transaction/register method. Card reference number must be provided during transaction registration in methodRefId parameter.
Responses

200 The charge card command has been accepted - notification will be send on success.
400 Invalid input data
401 Not authorized

POST
/api/v1/card/charge
Request samples

Payload
Content type
application/json

Copy
{
"token": "string"
}
Response samples

200400401
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0
},
"responseCode": 0
}
Card Payment
Method is used for charging customer's card. Method directly sends card details.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

transactionToken
required
string
Token obtained during registration
cardNumber
required
string <= 16 characters
Card number
cardDate
required
string
Card expiry date in format MMYYYY
cvv
required
string
Card CVV
clientName
required
string
First name and surname of cardholder
Responses

200 The card payment has been succesed.
201 The card payment requires 3DS redirection.
400 Invalid input data
401 Not authorized
409 Conflict

POST
/api/v1/card/pay
Request samples

Payload
Content type
application/json

Copy
{
"transactionToken": "string",
"cardNumber": "string",
"cardDate": "string",
"cvv": "string",
"clientName": "string"
}
Response samples

200201400401409
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"redirectUrl": "string"
},
"responseCode": 0
}
Card Additional Notification
Notification is sent to the url given in the "urlCardPaymentNotification" parameter, which must be added to the transaction/register method, or to a fixed address saved in the P24 account configuration. The value from the token, if it was sent, is paramount.


For positive authorization
amount	
integer
Transaction amount
3ds	
boolean
Was 3D-Secure performed during payment?
method	
integer
Payment method ID
refId	
string
Card reference number
orderId	
integer <int64>
Transaction number assigned by P24 for oneclick sampling
sessionId	
string
Unique identifier from merchant's system
bin	
integer
Registered card bin
maskedCCNumber	
string
Masked card number
ccExp	
string
Card expiry date in MMYYYY format eg. 122020
hash	
string
Unique card hash – unique for each card
cardCountry	
string
Country code compatible with ISO, e.g. PL
risk	
integer
0 – safe, 1 – suspicious, 2 – hazardous. Score calculated using a card payment risk calculation tool
liabilityshift	
boolean
Liability Shift means transferring responsibility for fraudulent transactions from the merchant to the card issuer or payment processor. 1 – Yes, 0 – No
sign	
string

Checksum of parameters:
{"amount":int,"3ds":boolean,"method":int,"refId":"str","orderId":int,"sessionId":"str",
"bin":int,"maskedCCNumber":"str","ccExp":"str","hash":"str",
"cardCountry":"str","risk":int,"liabilityshift":boolean,"crc":"str"}

calculated with the use of sha384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"

Copy
{
"amount": 0,
"3ds": true,
"method": 0,
"refId": "string",
"orderId": 0,
"sessionId": "string",
"bin": 0,
"maskedCCNumber": "string",
"ccExp": "string",
"hash": "string",
"cardCountry": "PL",
"risk": 0,
"liabilityshift": false,
"sign": "string"
}
For negative authorization
amount	
integer
Transaction amount
3ds	
boolean
Was 3D-Secure performed during payment?
method	
integer
Payment method ID
orderId	
integer <int64>
Transaction number assigned by P24 for oneclick sampling
sessionId	
string
Unique identifier from merchant's system
errorCode	
string
Error code
errorMessage	
string
Error description
sign	
string

Before calculating the sign value, it is necessary to convert the alphanumeric characters to diacritics.

Checksum of parameters:
{"amount":int,"3ds":boolean,"method":int,"orderId":int,"sessionId":"str",
"errorCode":"str","errorMessage":"str","crc":"str"}

Calculated with the use of SHA384

IMPORTANT!:
in case json_encode function is used, the following attributes should be added
"JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES"

Copy
{
"amount": 0,
"3ds": true,
"method": 0,
"orderId": 0,
"sessionId": "string",
"errorCode": "string",
"errorMessage": "string",
"sign": "string"
}
BLIK Use Cases
Introduction
In addition to the standard payment based on redirection to P24 paymantwall, it is also possible to place Blik payments on the Merchant website.
How to place BLIK payment on the merchant's website? (BLIK level 0)
Transaction may process with paymentMethod/blik/chargeByCode method. It's necessary to previously register transaction using transaction/register method. In this case only “token” and “blikCode” parameters are mandatory in paymentMethod/blik/chargeByCode method.


Blik OneClick



Blik
What is 1-click BLIK payment?
As the name suggests the payment allows to make purchases with one click. It doesn't require entering the BLIK code, only simple one-click acceptance in the application.


Blik OneClick
How to get information about an alias?
There are two ways to get information about an alias:


Acquiring information by handling asynchronous notification. (recommended)

In order to receive an alias for subsequent payments, call the getAliasesByEmail method.
The method returns a list of aliases (along with the type and status) created for a given e-mail address in the scope of a given merchant.
For Aliases registered with values call getAliasesByEmail{email}/custom

Due to the asynchronous character of the transaction status processing, the getAliasesByEmail method may return the current status of aliases within up to 60 seconds following a correctly performed transaction.
How to register an alias for use in 1-click payment?
Transaction may process with paymentMethod/blik/chargeByCode method. The service allows to assign individual alias value and alias label value in input parameters. If parameter “referenceRegister” = true during transaction registration process, the Alias registration request is transferred to BLIK and the Customer receives an invitation generated by the bank application to pay without the T6 code, in the merchant’s system.

Once this method is called, the amount provided during transaction registration is charged and alias is registered in P24/BLIK system.

Created alias may be used for processing OneClick payments.

Once the alias is registered, the Customer will not be asked to provide T6 code during the next payments.



Blik



In order to register another mobile application in BLIK system, method paymentMethod/blik/chargeByCode should be used with a 6-digit BLIK code generated by the application. The transaction in P24 must be registered on the same customer’s e-mail address.

The alias is created based on the e-mail address provided during transaction registration process. This means that only one alias of a given type may be registered on this e-mail address unless “aliasValue” and “aliasLabel” parameters are used.

In order to register more than one alias for provided e-mail address, include the alias value and alias label. This way merchant would assure that aliases are unique. The list of merchant’s aliases for a given e-mail may be obtained by getAliasesByEmail method. It is possible to register the same alias defined by the merchant with several e-mail addresses. In this case, getAliasesByEmail returns the same alias value for each e-mail.
How to make a 1-click payment (only 1-click)?
ChargeByAlias is a one click payment method. It allows to charge customer using a previously obtained alias. Alias obtained must be provided in methodRefId parameter during transaction registration (transaction/register). Please use type=alias.



Blik
How to handle two registered applications for one alias (only 1-click)?
The method ChargeByAlias allows to charge customer using previously obtained alias and an “alternativeKey” key identifying customer’s mobile application. Additional parameter "alternativeKey" is used.

This method may be used only if chargeByAlias method returns „alias” type with error code 51 and http code 409 (the alias selected for the identification is ambiguous!) as well as the list of alternative keys identifying the customer’s mobile applications – "AliasAlternative".

The customer should select proper mobile application as a payment method. Alias should be selected from the "AliasAlternative" list.

This method is used with the "alternativeKey" type, only if the customer has more that one mobile application linked to the same UID type alias.

In case of receiving error 51, merchant should not record alternative keys and labels. These data are subject to change at the bank – by user in the bank application.



Blik
How to handle with an expired token? (only 1-click)
When a transaction is rejected due to error 68 (customer’s alias expired), you must re-register the transaction with a new alias - according to the information in section register an alias.

Blik
How to test BLIK (white label) in Sandbox?
To test the BLIK White label payment using the T6 code in the Sandbox environment, use the 6-digit BLIK code in the format 777XXX for a successful transaction, where X is any digit from 0-9. To simulate a failed transaction, use any 6 digits. We also recommend not using the same BLIK code in short intervals to ensure correct answers.
Transfer title visible in the client's application?
By default a client in their bank application sees the P24 transaction number as the main title. Additional lines also show the information passed in the description parameter in the transaction/register request, as an auxiliary value.

The customer could see personalized value sent by the merchant instead of the main P24 transaction title. In this case, the transaction/register request should contain the transferLabel parameter, which rewrites the main payment title.

BLIK API
BLIK charge by code
Allows to charge blik transaction with T6 code. Returns unique transaction Id.
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

token
required
string
Token obtained during transaction registration request via transaction/register.

IMPORTANT!:
In order to correctly charge the payer using the blikChargeByCode method the PSU object must be sent in the additional object in the transaction/register request.
blikCode
required
string
6-digit, one-time BLIK code generated in the app
aliasValue	
string
Unique alias of the user which can be used to charge client's next transactions
aliasLabel	
string [ 5 .. 35 ] characters
Alias label displayed in the app
recurring	
object (RecurringParamsIn)
Responses

201 Created
400 Invalid input data
401 not authorized
500 Undefined error

POST
/api/v1/paymentMethod/blik/chargeByCode
Request samples

Payload
Content type
application/json

Copy
Expand all Collapse all
{
"token": "string",
"blikCode": "string",
"aliasValue": "string",
"aliasLabel": "string",
"recurring": {
"type": "M",
"expirationDate": "string",
"frequency": "string",
"totalLimitAmount": 0,
"limitAmount": 0,
"totalLimitCount": 0,
"minimumTime": true,
"availableBanks": true
}
}
Response samples

201400401500
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"message": "string"
},
"responseCode": 0
}
BLIK charge by Alias
ChargeByAlias is a one click payment method. It allows to charge customer using a previously obtained alias (getAliasesByEmail). Alias obtained must be provided in methodRefId parameter during transaction registration
AUTHORIZATIONS:
basicAuth
REQUEST BODY SCHEMA: application/json

token
required
string
Token obtained during transaction registration request via transaction/register.

IMPORTANT!:
In order to correctly charge the payer using the blikChargeByAlias method the PSU object must be sent in the additional object in the transaction/register request.
type
required
string
Set value „alias”
alias
aliasValue	
string
Warning! If you send the parameter it will result in overwriting the current value.
Unique alias of the user which can be used to charge client's next transactions
aliasLabel	
string
Warning! If you send the parameter it will result in overwriting the current value.
Alias label displayed in the app
recurring	
object (RecurringParamsIn)
Responses

201 Created
400 Bad request
401 Not authorized
409 AlternativeKeys
500 Undefined error

POST
/api/v1/paymentMethod/blik/chargeByAlias
Request samples

Payload
Content type
application/json
Example
alias

Copy
Expand all Collapse all
{
"token": "string",
"type": "alias",
"aliasValue": "string",
"aliasLabel": "string",
"recurring": {
"type": "M",
"expirationDate": "string",
"frequency": "string",
"totalLimitAmount": 0,
"limitAmount": 0,
"totalLimitCount": 0,
"minimumTime": true,
"availableBanks": true
}
}
Response samples

201400401409500
Content type
application/json

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"message": "string"
},
"responseCode": 0
}
Getting Aliases ByEmail
In order to receive an alias for subsequent payments, call the "getAliasesByEmail" method.

The method returns a list of aliases (along with the type and status) created for a given email address in the scope of a given merchant.

AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

email
required
any
For aliases registered by email address
Responses

200 OK
400 Bad Request
401 Unauthorized
404 Alias not found

GET
/api/v1/paymentMethod/blik/getAliasesByEmail/{email}
Response samples

200400401404
Content type
application/json

Copy
Expand all Collapse all
{
"data": [
{}
],
"responseCode": 0
}
Getting Aliases ByEmail (Custom)
In order to receive an alias for subsequent payments, call the "getAliasesByEmail" method.

The method returns a list of aliases (along with the type and status) created for a given email address in the scope of a given merchant.
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

email
required
any
For Aliases registered with values "aliasValue" and "aliasLabel"
Responses

200 OK
400 Bad Request
401 Unauthorized
404 Alias not found

GET
/api/v1/paymentMethod/blik/getAliasesByEmail/{email}/custom
Response samples

200400401404
Content type
application/json

Copy
Expand all Collapse all
{
"data": [
{}
],
"responseCode": 0
}
BLIK Additional Notification
For any of BLIK type transaction, additional payment status notification is provided.

Notification is sent to the url given in the "urlCardPaymentNotification" parameter, which must be added to the transaction/register method, or to a fixed address saved in the P24 account configuration. The value from the token, if it was sent, is paramount.
data	
object

Copy
Expand all Collapse all
{
"data": {
"orderId": 0,
"sessionId": "string",
"method": 0,
"result": {},
"sign": "string"
}
}
Alias Update Notification
Additional notification may be sent to the specified URL, if the alias status is created or changed. The address is configured via the P24 service. The notification can be used as an alternative to the getAliasesByEmail method.
email	
string
client email
value	
string
alias value
type	
string
UID for oneclick, PAYID for recurring payments
status	
string
REGISTERED / UNREGISTERED / EXPIRED

Copy
{
"email": "string",
"value": "string",
"type": "string",
"status": "string"
}
Report API
History transaction
To enable this functionality, please contact integration department via contact form

This method gives you back information about: batches, transactions and refunds, in questioned period of time.
Pagination
To call next page you need to call report/history with token as a query parameter, e.g.:
GET	https://secure.przelewy24.pl/api/v1/report/history/{token}
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

dateFrom
required
string
Date in format YYYYMMDD
dateTo
required
string
Date in format YYYYMMDD. Max period length is 31 days
type	
string
Type of objects to load. Omit this parameter, if you want to load everything. Acceptable values: batch, transaction, refund.
Responses

200 OK
400 Bad request
401 Not authorized
500 Undefined error

GET
/api/v1/report/history
Response samples

200400401500
Content type
application/json

Copy
Expand all Collapse all
{
"data": [
{}
],
"token": "string",
"responseCode": 0,
"pageInformation": [
{}
]
}
Batch information
To enable this functionality, please contact integration department via contact form

Method returns all transactions and refunds paid in requested batch.
Pagination
To call next page you need to call report/batch/details with token in payload e.g.:
GET	https://secure.przelewy24.pl/api/v1/report/batch/details/{token}
AUTHORIZATIONS:
basicAuth
PATH PARAMETERS

batch
required
integer
Unique ID of batch (withdrawal)
token	
string
Token needed to request next page
Responses

200 OK
400 Bad request
401 Not authorized
500 Undefined error

GET
/api/v1/report/batch/details
Response samples

200400401500
Content type
application/json

Copy
Expand all Collapse all
{
"token": "string",
"responseCode": 0,
"pageInformation": {
"recordsOnPage": 0,
"recordsAll": 0,
"pageCount": 0
},
"data": [
{}
]
}
Google Pay Description
GPay
Google Pay is fast and simple method of payments offered by Google. Card details are safely stored on Google servers. Service allows users to perform the payment process without manually filling card details or contact form.

Google Pay allows to obtain the customer’s encrypted card details which are required to charge it. In order to proceed Google Pay payment, customer first must save payment card details in Google account using any Google platform (e.g. purchasing an application in Google Play, paying for storage on Google Drive, etc.) or directly on https://pay.google.com


In order to use the service, a relevant contract with the card operator must be signed first. To enable this functionality, contact Partner Support via contact form.

GPay
Communication scheme
Once the customer clicks „Pay with Google Pay” button, the Google Pay form is displayed. This form allows customer to confirm Google account and choose card to be used for payment process. At this stage card may be changed to a different one (previously saved) or new card may be added. Google Pay script displays encrypted card details using postMessage function which the shop must intercept, encrypt once again using the base64 function and send in "methodRefId" parameter along with the transaction data.

Merchant’s system may call the script available on Google’s website. Details available at:

https://developers.google.com/pay/api/web/guides/tutorial

In order to add P24, it is necessary to modify the processor’s data in the script call:

  var tokenizationSpecification =
  {
  tokenizationType: 'PAYMENT_GATEWAY',
  parameters:
    {
      gateway: 'przelewy24',
      gatewayMerchantId: '[MerchantID from P24]'
    }
  }
Transaction registration
In order to register Google Pay transaction, additional "methodRefId" parameter must be used. The parameter can be obtained from Google by postMessage (paymentMethodToken.token) and should be encrypted with base64 encryption.

POST	https://secure.przelewy24.pl/api/v1/transaction/register
Additional POST call parameter

Field name	Type	Required	Description
methodRefId	STRING	Y	Token obtained from Google Pay and encrypted with base64
Before sending the transaction request, transaction data must be saved in the merchant’s local database. In particular, the session ID and the transaction amount should be stored.
Implementation for Android
To implement Google Pay on Android devices see Google Pay API documentation: https://developers.google.com/pay/api/android
Additional information
In order to unify styles of website and mobile applications, a set of guidelines has been made available. https://developers.google.com/pay/api/web/guides/brand-guidelines

Guidelines for creating mobile applications are available at: https://developers.google.com/pay/api/android/guides/tutorial
Google Pay API
Token transfer
Upon token obtaining from P24, JavaScript script should be called.

On completion of the transaction, a relevant response (callback) is called. In case 3D-Secure is required, customer will be redirected to bank’s website. After authorisation customer will be redirected to URL provided in "urlReturn" parameter.
PATH PARAMETERS

TOKEN	
any
Token obtained from Przelewy24.

GET
/bundle/payWithGoogle/{TOKEN}
Request samples

HTML

Copy
<head>
  <meta charset="UTF-8">
  <meta name="viewport"
        content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>PayWithGoogle</title>
  <script src="https://secure.przelewy24.pl/bundle/payWithGoogle/{{TOKEN}}"></script>
</head>
<body>
<script>
  document.addEventListener("DOMContentLoaded", function () {
      Przelewy24PayWithGoogle.config({
          errorCallback: function () {
              alert("error");
          },
          exceptionCallback: function () {
              alert("exception");
          },
          requestFailedCallback: function () {
              alert('requestFailed');
          },
          completePaymentCallback: function () {
              alert("success");
          }
      });
      Przelewy24PayWithGoogle.charge();
  });
</script>
</body>
Apple Pay
ApplePay
Introduction
Thanks to Apple Pay, you don't have to set up any accounts or fill out long forms when shopping on websites opened in Safari on your iPhone, iPad or Mac. And because the Touch ID reader is also available in the MacBook Air and MacBook Pro, finalizing the transaction requires only a fingerprint and is faster, easier and safer than before.

APay
Description
During the shopping process, Apple Pay uses the number assigned to a specific device and a unique transaction code. As a result, your card number is never stored on your device or Apple servers. And at the time of payment, Apple never makes card numbers available to sellers.

The service requires prior signing of the contract with the card operator, for detailed information please contact the Sales Department of Przelewy24).
Creating Merchant ID And Domain Certification
Transaction processing via ApplePay requires the Seller to create a merchant and pass domain certification. The process is described at https://developer.apple.com/documentation/apple_pay_on_the_web/configuring_your_environment.
Creating Apple Pay Payment Processing Certificate
Before proceeding with the process of creating a certificate, obtain a CSR file (for detailed information, please contact the Implementation Department of Przelewy24 via contact form.

After logging in to your Apple Developer account:
select the Certificates, IDs & Profiles option,
select the Identifiers / Merchant IDs option,
select the Merchant ID created in the previous step and go to the Edit option,
select the Create Certificate option in the Apple Pay Payment Processing Certificate section,
select the Continue option,
upload the CSR file received from the Przelewy24 Implementation Department, using the Choose File option,
download the generated certificate and forward it to the Przelewy24 Implementation Department.
Communication Scheme
After clicking the "ApplePay" button, the Apple form appears on the screen, where the user can select a card saved on the device. The background script passes the encoded card data in the paymentData object, which the store must take over, and then encode via base64 again and send it in the methodRefId parameter together with the transaction data. The store on its website must call the script provided by Apple (details available at https://developer.apple.com/documentation/apple_pay_on_the_web). The background script passes the encoded card data, which the store must take over, and then encode via base64 again and send it in the methodRefId parameter together with the transaction data.
Transaction Registration
In order to register Apple Pay transaction, additional "methodRefId" parameter must be used. The parameter can be obtained from Apple by postMessage (paymentMethodToken.token) and should be encrypted with base64 encryption.

POST	https://secure.przelewy24.pl/api/v1/transaction/register
Additional POST call parameter

Field name	Type	Required	Description
methodRefId	STRING	Y	Token obtained from Apple Pay and encrypted with base64
Additional Information
To harmonize the style used on the website and in the mobile application, some tips should be followed when implementing the ApplePay service. Descriptions of styles and buttons for websites are available at https://developer.apple.com/apple-pay/acceptable-use-guidelines-for-websites/.
Apple Pay API
Token transfer
Upon token obtaining from P24, JavaScript script should be called

On completion of the transaction, a relevant response (callback) is called.
PATH PARAMETERS

TOKEN	
any
Token obtained from Przelewy24.

GET
/bundle/applepay/{TOKEN}
Request samples

HTML

Copy
<head>
    <meta charset="UTF-8">
    <meta name="viewport"
          content="width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Apple Pay</title>
    <script src="https://secure.przelewy24.pl/bundle/applepay/{{TOKEN}}"></script>
</head>
<body>
<script>
    document.addEventListener("DOMContentLoaded", function () {
      Przelewy24ApplePay.config({
        errorCallback: function () {
            alert("error");
        },
        exceptionCallback: function () {
            alert("exception");
        },
        requestFailedCallback: function () {
            alert('requestFailed');
        },
        completePaymentCallback: function () {
            alert("success");
        }
      });
    Przelewy24ApplePay.charge();
    });
  </script>
  </body>
Buttons and banners
Instalments – Introduction

BNPL solutions may be a way to increase the turnover and reduce the rate of abandoned carts at your shop. Yet, the activation of online instalments alone on the payment wall will not bring about the desired effect (... or the effect will be limited).

It is the correct exposure on your shop’s website that allows to harvest the full potential of online instalments. This guide will let you find out how to go about it.

Minimalism is a good practice in UX, but forget it if you want your customers to select instalment payments. If you want to reach the buyers who select this method to pay for their orders, make sure they learn about it before the order is finalised. Inform your customers that it is possible to divide the payment into instalments at each step of the shopping path:
• on the main webpage,
• on the list of products
• on the product card and
• at checkout

Be aware of the fact that customers who choose to pay in instalments usually have limited funds at their disposal. While still determined to make the purchase, they are looking for the most advantageous offer.

Post information on instalments on the main webpage. Use a slider or a top banner.

raty-slider
This is how you’ll reach a wide circle of customers. Newcomers will get the signal that they may pay in instalments.

Add the instalments logo to the payment methods presented in the webpage’s footer. That’s one of the key spots where customers look for information on the payment methods available.

raty-stopka
If your website is internally complex (categories, subcategories), place the “Buy in instalments” button on the subpages as well.

raty-tu-kupisz-na-raty
Informing customers on the availability of payment in instalments on product cards serves to increase the conversion of this payment method by over 40%, while it is only 8% when the information is provided as late as at the cart stage or at checkout. The minimum option is static graphic ads. Thanks to them, you will let your customer know that Przelewy24 Instalments service is available.

raty-karta-produktu
List of products is yet another spot where you can attract your customers to make quicker shopping decisions or to add additional products to their carts.

Basket / order summary - this is where placing information on instalments is a must. Home stretch. You don’t want your customer to abandon the cart at this point. Give a clear signal concerning the finalisation of instalment payments. Remember that at this stage the customer will already have selected the payment method, so make sure you keep telling them about instalments from the very start of their purchasing journey.

raty-koszyk
Checkout - place the instalment payment method at checkout.

raty-checkout To find out how to display a given payment method, visit How to display the full selection of payment methods on the shop’s website?
By default, the instalment method is available as method=303. Redirection should be done in compliance with the z guidelines

All graphic materials are available here: (https://www.przelewy24.pl/storage/app/media/do-pobrania/p24_raty/p24_raty_materialy_graficzne.zip)
Widget
Present the lowest possible instalment for a given product.

raty-najnizsza
Once customers click on the widget, any element may be displayed, for example a pop-up window with information on Przelewy24 I Instalments. In order to activate the widget, the following java script must be entered:

MINI version

raty-mini
  <body>
    <!-- Tutaj będzie wyświetlony widget z wersją mini -->
    <div id="installment-widget-mini"></div>
    <!-- Embedding tag with package -->
    <script type="application/javascript" src="https://apm.przelewy24.pl/installments/installment-calculator-app.umd.sdk.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const config = {
          sign: "string",
          posid: 'test', // Payment point identifier posId.
          method: '303',
          amount: 1000, // grosze
          currency: "PLN", // Currency only "PLN"
          lang: "pl",  // for now only pl
          test: false  // Optionally, for use during testing, takes a boolean value
        }
        // Create constructor and provide config
        const installmentCalculatorApp = new InstallmentCalculatorApp(config);
        // Creating a mini Widget component
        const miniWidget = await installmentCalculatorApp.create('mini-widget');
        // Render the miniWidget component in the tag with id installment-widget-mini
        miniWidget.render('installment-widget-mini');
      });
    </script>
  </body>
MAX version

raty-max
    <body>
    <!-- Tutaj będzie wyświetlony widget z wersją max -->
    <div id="installment-widget-max"></div>
    <!-- Embedding tag with package -->
    <script type="application/javascript" src="https://apm.przelewy24.pl/installments/installment-calculator-app.umd.sdk.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const config = {
          sign: "string",
          posid: 'test', // Payment point identifier posId.
          method: '303',
          amount: 1000, // grosze
          currency: "PLN", // Currency only "PLN"
          lang: "pl",  // for now only pl
          test: false  // Optionally, for use during testing, takes a boolean value
        }
        // Create constructor and provide config
        const installmentCalculatorApp = new InstallmentCalculatorApp(config);
       // Creating the maxWidget component
        const maxWidget = await installmentCalculatorApp.create('max-widget');
         // Render the maxWidget component in the tag with id installment-calculator-max
        maxWidget.render('installment-widget-max');
      });
    </script>
  </body>
Simulator
This is a way to increase user engagement. The calculator allows you to present more detailed information about the available installments.

“Clicking through” different installment options will bring the customer closer to the next stage of the purchasing path.

raty-symulator
Przykłady gotowych kodów do prezentacji symulatora na stronie

MINI version with click and call calculator in modal
MAXI version with click and call calculator in modal
MINI widget with click and receive link to calculator
MAXI widget with click and receive link to calculator
Custom button with click and calculator call in modal
Custom button with click and receiving link to calculator
MINI version with click and call calculator in modal

  <body>
    <!-- The mini version of the widget will be displayed here -->
    <div id="installment-widget-mini"></div>
    <!-- The container for the modal should be added at the end of the body -->
    <div id="calculator-modal"></div>
    <!-- Embedding tag with package -->
    <script type="application/javascript" src="https://apm.przelewy24.pl/installments/installment-calculator-app.umd.sdk.js"></script>
    <script>
      document.addEventListener("DOMContentLoaded", async () => {
        const config = {
          sign: "string",
          posid: 'test', // Payment point identifier posId.
          method: '303',
          amount: 1000, // grosze
          currency: "PLN", // Currency only "PLN"
          lang: "pl",  // For now only pl
          test: false  // Optionally, for use during testing, takes a boolean value
        }
        // Create constructor and provide config
        const installmentCalculatorApp = new InstallmentCalculatorApp(config);
        // Create calculatorModal component
        const calculatorModal = await installmentCalculatorApp.create('calculator-modal');
        // Render a modal with a calculator in a tag with id calculator-modal.
        // Attention!!!
        // 1. Do not use id="installment-calculator-modal"
        // 2. calculator Modal must be rendered before mini Widget
        calculatorModal.render('calculator-modal');
        // Creating a mini Widget component
        const miniWidget = await installmentCalculatorApp.create('mini-widget');
        // Render the miniWidget component in the tag with id installment-widget-mini
        miniWidget.render('installment-widget-mini');
      });
    </script>
  </body>
  
Parameters required to call the widget or the simulator:

Parametr	Description
sign	Calculated as sha384({„crc”:”string”,”posId”:int,”method”:int})
posId	Shop ID (by default Partner ID)
method	By default 303
amount	Amount in grosz
lang	Allowed: pl
currency	Allowed: PLN
Parameters optional to call the widget or the simulator:

Parametr	Description
test	Allowed: true, false
When the test parameter is sent with the value true, the sign, posId and method fields are not validated, but must instead be passed in the config object.


я думаю ты неправильно что-то написал

Вот API 

{
  "merchantId": 0,
  "posId": 0,
  "sessionId": "string",
  "amount": 0,
  "currency": "PLN",
  "description": "string",
  "email": "string",
  "client": "string",
  "address": "string",
  "zip": "string",
  "city": "string",
  "country": "PL",
  "phone": "string",
  "language": "pl",
  "method": 0,
  "urlReturn": "string",
  "urlStatus": "string",
  "timeLimit": 0,
  "channel": 1,
  "waitForResult": true,
  "regulationAccept": false,
  "shipping": 0,
  "transferLabel": "string",
  "mobileLib": 1,
  "sdkVersion": "string",
  "sign": "string",
  "encoding": "string",
  "methodRefId": "string",
  "cart": [
    {
      "sellerId": "string",
      "sellerCategory": "string",
      "name": "string",
      "description": "string",
      "quantity": 0,
      "price": 0,
      "number": "string"
    }
  ],
  "additional": {
    "shipping": {
      "type": 0,
      "address": "string",
      "zip": "string",
      "city": "string",
      "country": "string"
    },
    "PSU": {
      "IP": "string",
      "userAgent": "string"
    }
  }
}

